//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FOX.ExternalServices.SundrySmsService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    using System.Diagnostics.CodeAnalysis;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SundrySoap", Namespace="http://tempuri.org/")]
    [ExcludeFromCodeCoverage]
    public partial class Sundry : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private ValidationSoapHeader validationSoapHeaderValueField;
        
        private System.Threading.SendOrPostCallback WEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMergedPatientAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPatientAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDetailedPhrMergedAccounts1_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDetailedPhrMergedAccounts2_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPhrAdditionalAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPhrChildVerification_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePhrMergedAccountsPhoneDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePhrMergedAccounts1_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePhrMergedAccounts2_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback deletePhrMergedAccounts3_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback createPhrAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePhrAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback blockPhrAccount_SoftOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateProvidersNotesTemplatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePatientNotesTemplates_v1OperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSMSOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;


        /// <remarks/>

        public Sundry() {
            this.Url = global::FOX.ExternalServices.Properties.Settings.Default.FOX_ExternalServices_SundrySmsService_Sundry;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public ValidationSoapHeader ValidationSoapHeaderValue {
            get {
                return this.validationSoapHeaderValueField;
            }
            set {
                this.validationSoapHeaderValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventHandler WEB_PHR_SOFT_IPHR_PIN_GenerationCompleted;
        
        /// <remarks/>
        public event getMergedPatientAccount_SoftCompletedEventHandler getMergedPatientAccount_SoftCompleted;
        
        /// <remarks/>
        public event getPatientAccount_SoftCompletedEventHandler getPatientAccount_SoftCompleted;
        
        /// <remarks/>
        public event getDetailedPhrMergedAccounts1_SoftCompletedEventHandler getDetailedPhrMergedAccounts1_SoftCompleted;
        
        /// <remarks/>
        public event getDetailedPhrMergedAccounts2_SoftCompletedEventHandler getDetailedPhrMergedAccounts2_SoftCompleted;
        
        /// <remarks/>
        public event getPhrAdditionalAccount_SoftCompletedEventHandler getPhrAdditionalAccount_SoftCompleted;
        
        /// <remarks/>
        public event getPhrChildVerification_SoftCompletedEventHandler getPhrChildVerification_SoftCompleted;
        
        /// <remarks/>
        public event updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventHandler updatePhrMergedAccountsPhoneEmail1_SoftCompleted;
        
        /// <remarks/>
        public event updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventHandler updatePhrMergedAccountsPhoneEmail2_SoftCompleted;
        
        /// <remarks/>
        public event updatePhrMergedAccountsPhoneDeleteCompletedEventHandler updatePhrMergedAccountsPhoneDeleteCompleted;
        
        /// <remarks/>
        public event deletePhrMergedAccounts1_SoftCompletedEventHandler deletePhrMergedAccounts1_SoftCompleted;
        
        /// <remarks/>
        public event deletePhrMergedAccounts2_SoftCompletedEventHandler deletePhrMergedAccounts2_SoftCompleted;
        
        /// <remarks/>
        public event deletePhrMergedAccounts3_SoftCompletedEventHandler deletePhrMergedAccounts3_SoftCompleted;
        
        /// <remarks/>
        public event createPhrAccount_SoftCompletedEventHandler createPhrAccount_SoftCompleted;
        
        /// <remarks/>
        public event updatePhrAccount_SoftCompletedEventHandler updatePhrAccount_SoftCompleted;
        
        /// <remarks/>
        public event blockPhrAccount_SoftCompletedEventHandler blockPhrAccount_SoftCompleted;
        
        /// <remarks/>
        public event updateProvidersNotesTemplatesCompletedEventHandler updateProvidersNotesTemplatesCompleted;
        
        /// <remarks/>
        public event updatePatientNotesTemplates_v1CompletedEventHandler updatePatientNotesTemplates_v1Completed;
        
        /// <remarks/>
        public event sendSMSCompletedEventHandler sendSMSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WEB_PHR_SOFT_IPHR_PIN_Generation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable WEB_PHR_SOFT_IPHR_PIN_Generation(PHR_PIN_GENERATION objiPHRSignUp) {
            object[] results = this.Invoke("WEB_PHR_SOFT_IPHR_PIN_Generation", new object[] {
                        objiPHRSignUp});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void WEB_PHR_SOFT_IPHR_PIN_GenerationAsync(PHR_PIN_GENERATION objiPHRSignUp) {
            this.WEB_PHR_SOFT_IPHR_PIN_GenerationAsync(objiPHRSignUp, null);
        }
        
        /// <remarks/>
        public void WEB_PHR_SOFT_IPHR_PIN_GenerationAsync(PHR_PIN_GENERATION objiPHRSignUp, object userState) {
            if ((this.WEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted == null)) {
                this.WEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted);
            }
            this.InvokeAsync("WEB_PHR_SOFT_IPHR_PIN_Generation", new object[] {
                        objiPHRSignUp}, this.WEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted, userState);
        }
        
        private void OnWEB_PHR_SOFT_IPHR_PIN_GenerationOperationCompleted(object arg) {
            if ((this.WEB_PHR_SOFT_IPHR_PIN_GenerationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WEB_PHR_SOFT_IPHR_PIN_GenerationCompleted(this, new WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getMergedPatientAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long getMergedPatientAccount_Soft(long practiceCode, long patientAccount) {
            object[] results = this.Invoke("getMergedPatientAccount_Soft", new object[] {
                        practiceCode,
                        patientAccount});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getMergedPatientAccount_SoftAsync(long practiceCode, long patientAccount) {
            this.getMergedPatientAccount_SoftAsync(practiceCode, patientAccount, null);
        }
        
        /// <remarks/>
        public void getMergedPatientAccount_SoftAsync(long practiceCode, long patientAccount, object userState) {
            if ((this.getMergedPatientAccount_SoftOperationCompleted == null)) {
                this.getMergedPatientAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMergedPatientAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("getMergedPatientAccount_Soft", new object[] {
                        practiceCode,
                        patientAccount}, this.getMergedPatientAccount_SoftOperationCompleted, userState);
        }
        
        private void OngetMergedPatientAccount_SoftOperationCompleted(object arg) {
            if ((this.getMergedPatientAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMergedPatientAccount_SoftCompleted(this, new getMergedPatientAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPatientAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long getPatientAccount_Soft(long practiceCode, long mergedPatientAccount) {
            object[] results = this.Invoke("getPatientAccount_Soft", new object[] {
                        practiceCode,
                        mergedPatientAccount});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getPatientAccount_SoftAsync(long practiceCode, long mergedPatientAccount) {
            this.getPatientAccount_SoftAsync(practiceCode, mergedPatientAccount, null);
        }
        
        /// <remarks/>
        public void getPatientAccount_SoftAsync(long practiceCode, long mergedPatientAccount, object userState) {
            if ((this.getPatientAccount_SoftOperationCompleted == null)) {
                this.getPatientAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPatientAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("getPatientAccount_Soft", new object[] {
                        practiceCode,
                        mergedPatientAccount}, this.getPatientAccount_SoftOperationCompleted, userState);
        }
        
        private void OngetPatientAccount_SoftOperationCompleted(object arg) {
            if ((this.getPatientAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPatientAccount_SoftCompleted(this, new getPatientAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDetailedPhrMergedAccounts1_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getDetailedPhrMergedAccounts1_Soft(long practiceCode, long patientAccount) {
            object[] results = this.Invoke("getDetailedPhrMergedAccounts1_Soft", new object[] {
                        practiceCode,
                        patientAccount});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getDetailedPhrMergedAccounts1_SoftAsync(long practiceCode, long patientAccount) {
            this.getDetailedPhrMergedAccounts1_SoftAsync(practiceCode, patientAccount, null);
        }
        
        /// <remarks/>
        public void getDetailedPhrMergedAccounts1_SoftAsync(long practiceCode, long patientAccount, object userState) {
            if ((this.getDetailedPhrMergedAccounts1_SoftOperationCompleted == null)) {
                this.getDetailedPhrMergedAccounts1_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDetailedPhrMergedAccounts1_SoftOperationCompleted);
            }
            this.InvokeAsync("getDetailedPhrMergedAccounts1_Soft", new object[] {
                        practiceCode,
                        patientAccount}, this.getDetailedPhrMergedAccounts1_SoftOperationCompleted, userState);
        }
        
        private void OngetDetailedPhrMergedAccounts1_SoftOperationCompleted(object arg) {
            if ((this.getDetailedPhrMergedAccounts1_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDetailedPhrMergedAccounts1_SoftCompleted(this, new getDetailedPhrMergedAccounts1_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDetailedPhrMergedAccounts2_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getDetailedPhrMergedAccounts2_Soft(long practiceCode, long patientAccount, long mergedPatientAccount) {
            object[] results = this.Invoke("getDetailedPhrMergedAccounts2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getDetailedPhrMergedAccounts2_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount) {
            this.getDetailedPhrMergedAccounts2_SoftAsync(practiceCode, patientAccount, mergedPatientAccount, null);
        }
        
        /// <remarks/>
        public void getDetailedPhrMergedAccounts2_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount, object userState) {
            if ((this.getDetailedPhrMergedAccounts2_SoftOperationCompleted == null)) {
                this.getDetailedPhrMergedAccounts2_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDetailedPhrMergedAccounts2_SoftOperationCompleted);
            }
            this.InvokeAsync("getDetailedPhrMergedAccounts2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount}, this.getDetailedPhrMergedAccounts2_SoftOperationCompleted, userState);
        }
        
        private void OngetDetailedPhrMergedAccounts2_SoftOperationCompleted(object arg) {
            if ((this.getDetailedPhrMergedAccounts2_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDetailedPhrMergedAccounts2_SoftCompleted(this, new getDetailedPhrMergedAccounts2_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPhrAdditionalAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getPhrAdditionalAccount_Soft(long practiceCode, long patientAccount) {
            object[] results = this.Invoke("getPhrAdditionalAccount_Soft", new object[] {
                        practiceCode,
                        patientAccount});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getPhrAdditionalAccount_SoftAsync(long practiceCode, long patientAccount) {
            this.getPhrAdditionalAccount_SoftAsync(practiceCode, patientAccount, null);
        }
        
        /// <remarks/>
        public void getPhrAdditionalAccount_SoftAsync(long practiceCode, long patientAccount, object userState) {
            if ((this.getPhrAdditionalAccount_SoftOperationCompleted == null)) {
                this.getPhrAdditionalAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPhrAdditionalAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("getPhrAdditionalAccount_Soft", new object[] {
                        practiceCode,
                        patientAccount}, this.getPhrAdditionalAccount_SoftOperationCompleted, userState);
        }
        
        private void OngetPhrAdditionalAccount_SoftOperationCompleted(object arg) {
            if ((this.getPhrAdditionalAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPhrAdditionalAccount_SoftCompleted(this, new getPhrAdditionalAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getPhrChildVerification_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool getPhrChildVerification_Soft(long practiceCode, long mergedPatientAccount) {
            object[] results = this.Invoke("getPhrChildVerification_Soft", new object[] {
                        practiceCode,
                        mergedPatientAccount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void getPhrChildVerification_SoftAsync(long practiceCode, long mergedPatientAccount) {
            this.getPhrChildVerification_SoftAsync(practiceCode, mergedPatientAccount, null);
        }
        
        /// <remarks/>
        public void getPhrChildVerification_SoftAsync(long practiceCode, long mergedPatientAccount, object userState) {
            if ((this.getPhrChildVerification_SoftOperationCompleted == null)) {
                this.getPhrChildVerification_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPhrChildVerification_SoftOperationCompleted);
            }
            this.InvokeAsync("getPhrChildVerification_Soft", new object[] {
                        practiceCode,
                        mergedPatientAccount}, this.getPhrChildVerification_SoftOperationCompleted, userState);
        }
        
        private void OngetPhrChildVerification_SoftOperationCompleted(object arg) {
            if ((this.getPhrChildVerification_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPhrChildVerification_SoftCompleted(this, new getPhrChildVerification_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePhrMergedAccountsPhoneEmail1_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updatePhrMergedAccountsPhoneEmail1_Soft(long practiceCode, long patientAccount, string newCellPhone, string newEmailId, string oldEmailId, string oldCellPhone) {
            object[] results = this.Invoke("updatePhrMergedAccountsPhoneEmail1_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        newCellPhone,
                        newEmailId,
                        oldEmailId,
                        oldCellPhone});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneEmail1_SoftAsync(long practiceCode, long patientAccount, string newCellPhone, string newEmailId, string oldEmailId, string oldCellPhone) {
            this.updatePhrMergedAccountsPhoneEmail1_SoftAsync(practiceCode, patientAccount, newCellPhone, newEmailId, oldEmailId, oldCellPhone, null);
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneEmail1_SoftAsync(long practiceCode, long patientAccount, string newCellPhone, string newEmailId, string oldEmailId, string oldCellPhone, object userState) {
            if ((this.updatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted == null)) {
                this.updatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted);
            }
            this.InvokeAsync("updatePhrMergedAccountsPhoneEmail1_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        newCellPhone,
                        newEmailId,
                        oldEmailId,
                        oldCellPhone}, this.updatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted, userState);
        }
        
        private void OnupdatePhrMergedAccountsPhoneEmail1_SoftOperationCompleted(object arg) {
            if ((this.updatePhrMergedAccountsPhoneEmail1_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePhrMergedAccountsPhoneEmail1_SoftCompleted(this, new updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePhrMergedAccountsPhoneEmail2_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updatePhrMergedAccountsPhoneEmail2_Soft(long practiceCode, long patientAccount, long mergedPatientAccount, string emailId, string cellPhone) {
            object[] results = this.Invoke("updatePhrMergedAccountsPhoneEmail2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount,
                        emailId,
                        cellPhone});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneEmail2_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount, string emailId, string cellPhone) {
            this.updatePhrMergedAccountsPhoneEmail2_SoftAsync(practiceCode, patientAccount, mergedPatientAccount, emailId, cellPhone, null);
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneEmail2_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount, string emailId, string cellPhone, object userState) {
            if ((this.updatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted == null)) {
                this.updatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted);
            }
            this.InvokeAsync("updatePhrMergedAccountsPhoneEmail2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount,
                        emailId,
                        cellPhone}, this.updatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted, userState);
        }
        
        private void OnupdatePhrMergedAccountsPhoneEmail2_SoftOperationCompleted(object arg) {
            if ((this.updatePhrMergedAccountsPhoneEmail2_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePhrMergedAccountsPhoneEmail2_SoftCompleted(this, new updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePhrMergedAccountsPhoneDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updatePhrMergedAccountsPhoneDelete(long practiceCode, long patientAccount, string newCellPhone, string emailId, string oldCellPhone) {
            object[] results = this.Invoke("updatePhrMergedAccountsPhoneDelete", new object[] {
                        practiceCode,
                        patientAccount,
                        newCellPhone,
                        emailId,
                        oldCellPhone});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneDeleteAsync(long practiceCode, long patientAccount, string newCellPhone, string emailId, string oldCellPhone) {
            this.updatePhrMergedAccountsPhoneDeleteAsync(practiceCode, patientAccount, newCellPhone, emailId, oldCellPhone, null);
        }
        
        /// <remarks/>
        public void updatePhrMergedAccountsPhoneDeleteAsync(long practiceCode, long patientAccount, string newCellPhone, string emailId, string oldCellPhone, object userState) {
            if ((this.updatePhrMergedAccountsPhoneDeleteOperationCompleted == null)) {
                this.updatePhrMergedAccountsPhoneDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePhrMergedAccountsPhoneDeleteOperationCompleted);
            }
            this.InvokeAsync("updatePhrMergedAccountsPhoneDelete", new object[] {
                        practiceCode,
                        patientAccount,
                        newCellPhone,
                        emailId,
                        oldCellPhone}, this.updatePhrMergedAccountsPhoneDeleteOperationCompleted, userState);
        }
        
        private void OnupdatePhrMergedAccountsPhoneDeleteOperationCompleted(object arg) {
            if ((this.updatePhrMergedAccountsPhoneDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePhrMergedAccountsPhoneDeleteCompleted(this, new updatePhrMergedAccountsPhoneDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deletePhrMergedAccounts1_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool deletePhrMergedAccounts1_Soft(long practiceCode, long patientAccount) {
            object[] results = this.Invoke("deletePhrMergedAccounts1_Soft", new object[] {
                        practiceCode,
                        patientAccount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts1_SoftAsync(long practiceCode, long patientAccount) {
            this.deletePhrMergedAccounts1_SoftAsync(practiceCode, patientAccount, null);
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts1_SoftAsync(long practiceCode, long patientAccount, object userState) {
            if ((this.deletePhrMergedAccounts1_SoftOperationCompleted == null)) {
                this.deletePhrMergedAccounts1_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePhrMergedAccounts1_SoftOperationCompleted);
            }
            this.InvokeAsync("deletePhrMergedAccounts1_Soft", new object[] {
                        practiceCode,
                        patientAccount}, this.deletePhrMergedAccounts1_SoftOperationCompleted, userState);
        }
        
        private void OndeletePhrMergedAccounts1_SoftOperationCompleted(object arg) {
            if ((this.deletePhrMergedAccounts1_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePhrMergedAccounts1_SoftCompleted(this, new deletePhrMergedAccounts1_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deletePhrMergedAccounts2_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool deletePhrMergedAccounts2_Soft(long practiceCode, long patientAccount, string emailId, string cellPhone) {
            object[] results = this.Invoke("deletePhrMergedAccounts2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        emailId,
                        cellPhone});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts2_SoftAsync(long practiceCode, long patientAccount, string emailId, string cellPhone) {
            this.deletePhrMergedAccounts2_SoftAsync(practiceCode, patientAccount, emailId, cellPhone, null);
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts2_SoftAsync(long practiceCode, long patientAccount, string emailId, string cellPhone, object userState) {
            if ((this.deletePhrMergedAccounts2_SoftOperationCompleted == null)) {
                this.deletePhrMergedAccounts2_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePhrMergedAccounts2_SoftOperationCompleted);
            }
            this.InvokeAsync("deletePhrMergedAccounts2_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        emailId,
                        cellPhone}, this.deletePhrMergedAccounts2_SoftOperationCompleted, userState);
        }
        
        private void OndeletePhrMergedAccounts2_SoftOperationCompleted(object arg) {
            if ((this.deletePhrMergedAccounts2_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePhrMergedAccounts2_SoftCompleted(this, new deletePhrMergedAccounts2_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deletePhrMergedAccounts3_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool deletePhrMergedAccounts3_Soft(long practiceCode, long patientAccount, long mergedPatientAccount) {
            object[] results = this.Invoke("deletePhrMergedAccounts3_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts3_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount) {
            this.deletePhrMergedAccounts3_SoftAsync(practiceCode, patientAccount, mergedPatientAccount, null);
        }
        
        /// <remarks/>
        public void deletePhrMergedAccounts3_SoftAsync(long practiceCode, long patientAccount, long mergedPatientAccount, object userState) {
            if ((this.deletePhrMergedAccounts3_SoftOperationCompleted == null)) {
                this.deletePhrMergedAccounts3_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeletePhrMergedAccounts3_SoftOperationCompleted);
            }
            this.InvokeAsync("deletePhrMergedAccounts3_Soft", new object[] {
                        practiceCode,
                        patientAccount,
                        mergedPatientAccount}, this.deletePhrMergedAccounts3_SoftOperationCompleted, userState);
        }
        
        private void OndeletePhrMergedAccounts3_SoftOperationCompleted(object arg) {
            if ((this.deletePhrMergedAccounts3_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deletePhrMergedAccounts3_SoftCompleted(this, new deletePhrMergedAccounts3_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createPhrAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool createPhrAccount_Soft(PhrloginAndAccountPractices ObjPhrloginAndAccountPractices) {
            object[] results = this.Invoke("createPhrAccount_Soft", new object[] {
                        ObjPhrloginAndAccountPractices});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void createPhrAccount_SoftAsync(PhrloginAndAccountPractices ObjPhrloginAndAccountPractices) {
            this.createPhrAccount_SoftAsync(ObjPhrloginAndAccountPractices, null);
        }
        
        /// <remarks/>
        public void createPhrAccount_SoftAsync(PhrloginAndAccountPractices ObjPhrloginAndAccountPractices, object userState) {
            if ((this.createPhrAccount_SoftOperationCompleted == null)) {
                this.createPhrAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreatePhrAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("createPhrAccount_Soft", new object[] {
                        ObjPhrloginAndAccountPractices}, this.createPhrAccount_SoftOperationCompleted, userState);
        }
        
        private void OncreatePhrAccount_SoftOperationCompleted(object arg) {
            if ((this.createPhrAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createPhrAccount_SoftCompleted(this, new createPhrAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePhrAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updatePhrAccount_Soft(long practiceCode, string oldEmail, string newEmail, string oldCellPhone, string NewcellPhone, string patientAccount, string modifiedby, string block, string password) {
            object[] results = this.Invoke("updatePhrAccount_Soft", new object[] {
                        practiceCode,
                        oldEmail,
                        newEmail,
                        oldCellPhone,
                        NewcellPhone,
                        patientAccount,
                        modifiedby,
                        block,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updatePhrAccount_SoftAsync(long practiceCode, string oldEmail, string newEmail, string oldCellPhone, string NewcellPhone, string patientAccount, string modifiedby, string block, string password) {
            this.updatePhrAccount_SoftAsync(practiceCode, oldEmail, newEmail, oldCellPhone, NewcellPhone, patientAccount, modifiedby, block, password, null);
        }
        
        /// <remarks/>
        public void updatePhrAccount_SoftAsync(long practiceCode, string oldEmail, string newEmail, string oldCellPhone, string NewcellPhone, string patientAccount, string modifiedby, string block, string password, object userState) {
            if ((this.updatePhrAccount_SoftOperationCompleted == null)) {
                this.updatePhrAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePhrAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("updatePhrAccount_Soft", new object[] {
                        practiceCode,
                        oldEmail,
                        newEmail,
                        oldCellPhone,
                        NewcellPhone,
                        patientAccount,
                        modifiedby,
                        block,
                        password}, this.updatePhrAccount_SoftOperationCompleted, userState);
        }
        
        private void OnupdatePhrAccount_SoftOperationCompleted(object arg) {
            if ((this.updatePhrAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePhrAccount_SoftCompleted(this, new updatePhrAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/blockPhrAccount_Soft", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool blockPhrAccount_Soft(long practiceCode, string email, string cellPhone, string strOperation) {
            object[] results = this.Invoke("blockPhrAccount_Soft", new object[] {
                        practiceCode,
                        email,
                        cellPhone,
                        strOperation});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void blockPhrAccount_SoftAsync(long practiceCode, string email, string cellPhone, string strOperation) {
            this.blockPhrAccount_SoftAsync(practiceCode, email, cellPhone, strOperation, null);
        }
        
        /// <remarks/>
        public void blockPhrAccount_SoftAsync(long practiceCode, string email, string cellPhone, string strOperation, object userState) {
            if ((this.blockPhrAccount_SoftOperationCompleted == null)) {
                this.blockPhrAccount_SoftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnblockPhrAccount_SoftOperationCompleted);
            }
            this.InvokeAsync("blockPhrAccount_Soft", new object[] {
                        practiceCode,
                        email,
                        cellPhone,
                        strOperation}, this.blockPhrAccount_SoftOperationCompleted, userState);
        }
        
        private void OnblockPhrAccount_SoftOperationCompleted(object arg) {
            if ((this.blockPhrAccount_SoftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.blockPhrAccount_SoftCompleted(this, new blockPhrAccount_SoftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateProvidersNotesTemplates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable updateProvidersNotesTemplates(ProviderNotes pn) {
            object[] results = this.Invoke("updateProvidersNotesTemplates", new object[] {
                        pn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void updateProvidersNotesTemplatesAsync(ProviderNotes pn) {
            this.updateProvidersNotesTemplatesAsync(pn, null);
        }
        
        /// <remarks/>
        public void updateProvidersNotesTemplatesAsync(ProviderNotes pn, object userState) {
            if ((this.updateProvidersNotesTemplatesOperationCompleted == null)) {
                this.updateProvidersNotesTemplatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateProvidersNotesTemplatesOperationCompleted);
            }
            this.InvokeAsync("updateProvidersNotesTemplates", new object[] {
                        pn}, this.updateProvidersNotesTemplatesOperationCompleted, userState);
        }
        
        private void OnupdateProvidersNotesTemplatesOperationCompleted(object arg) {
            if ((this.updateProvidersNotesTemplatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateProvidersNotesTemplatesCompleted(this, new updateProvidersNotesTemplatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updatePatientNotesTemplates_v1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable updatePatientNotesTemplates_v1(ProviderNotes pn) {
            object[] results = this.Invoke("updatePatientNotesTemplates_v1", new object[] {
                        pn});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void updatePatientNotesTemplates_v1Async(ProviderNotes pn) {
            this.updatePatientNotesTemplates_v1Async(pn, null);
        }
        
        /// <remarks/>
        public void updatePatientNotesTemplates_v1Async(ProviderNotes pn, object userState) {
            if ((this.updatePatientNotesTemplates_v1OperationCompleted == null)) {
                this.updatePatientNotesTemplates_v1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePatientNotesTemplates_v1OperationCompleted);
            }
            this.InvokeAsync("updatePatientNotesTemplates_v1", new object[] {
                        pn}, this.updatePatientNotesTemplates_v1OperationCompleted, userState);
        }
        
        private void OnupdatePatientNotesTemplates_v1OperationCompleted(object arg) {
            if ((this.updatePatientNotesTemplates_v1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePatientNotesTemplates_v1Completed(this, new updatePatientNotesTemplates_v1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ValidationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendSMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable sendSMS(CSSendSMS objCSSendSMS) {
            object[] results = this.Invoke("sendSMS", new object[] {
                        objCSSendSMS});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void sendSMSAsync(CSSendSMS objCSSendSMS) {
            this.sendSMSAsync(objCSSendSMS, null);
        }
        
        /// <remarks/>
        public void sendSMSAsync(CSSendSMS objCSSendSMS, object userState) {
            if ((this.sendSMSOperationCompleted == null)) {
                this.sendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSMSOperationCompleted);
            }
            this.InvokeAsync("sendSMS", new object[] {
                        objCSSendSMS}, this.sendSMSOperationCompleted, userState);
        }
        
        private void OnsendSMSOperationCompleted(object arg) {
            if ((this.sendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSMSCompleted(this, new sendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://tempuri.org/", IsNullable=false)]
    [ExcludeFromCodeCoverage]
    public partial class ValidationSoapHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string validUserIDField;
        
        private string validPasswordField;
        
        private string deviceInfoField;
        
        private string applicationNameField;
        
        private string machineNameField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string ValidUserID {
            get {
                return this.validUserIDField;
            }
            set {
                this.validUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string ValidPassword {
            get {
                return this.validPasswordField;
            }
            set {
                this.validPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceInfo {
            get {
                return this.deviceInfoField;
            }
            set {
                this.deviceInfoField = value;
            }
        }
        
        /// <remarks/>
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
        /// <remarks/>
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [ExcludeFromCodeCoverage]
    public partial class CSSendSMS {
        
        private string smsBodyField;
        
        private string userPhoneField;
        
        /// <remarks/>
        public string smsBody {
            get {
                return this.smsBodyField;
            }
            set {
                this.smsBodyField = value;
            }
        }
        
        /// <remarks/>
        public string userPhone {
            get {
                return this.userPhoneField;
            }
            set {
                this.userPhoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [ExcludeFromCodeCoverage]
    public partial class ProviderNotes {
        
        private int valueField;
        
        private string patientAccountField;
        
        private string claimNoField;
        
        private double patientPaidCashField;
        
        private double patientPaidCheckAmountField;
        
        private double patientPaidCreditCardField;
        
        private double amountAdjustedField;
        
        private string checkNoField;
        
        private double dueAmountField;
        
        private string userNameField;
        
        private string deviceInfoField;
        
        private string practiceCodeField;
        
        private string paymentPostingCategoryField;
        
        /// <remarks/>
        public int Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string PatientAccount {
            get {
                return this.patientAccountField;
            }
            set {
                this.patientAccountField = value;
            }
        }
        
        /// <remarks/>
        public string ClaimNo {
            get {
                return this.claimNoField;
            }
            set {
                this.claimNoField = value;
            }
        }
        
        /// <remarks/>
        public double PatientPaidCash {
            get {
                return this.patientPaidCashField;
            }
            set {
                this.patientPaidCashField = value;
            }
        }
        
        /// <remarks/>
        public double PatientPaidCheckAmount {
            get {
                return this.patientPaidCheckAmountField;
            }
            set {
                this.patientPaidCheckAmountField = value;
            }
        }
        
        /// <remarks/>
        public double PatientPaidCreditCard {
            get {
                return this.patientPaidCreditCardField;
            }
            set {
                this.patientPaidCreditCardField = value;
            }
        }
        
        /// <remarks/>
        public double AmountAdjusted {
            get {
                return this.amountAdjustedField;
            }
            set {
                this.amountAdjustedField = value;
            }
        }
        
        /// <remarks/>
        public string CheckNo {
            get {
                return this.checkNoField;
            }
            set {
                this.checkNoField = value;
            }
        }
        
        /// <remarks/>
        public double DueAmount {
            get {
                return this.dueAmountField;
            }
            set {
                this.dueAmountField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string DeviceInfo {
            get {
                return this.deviceInfoField;
            }
            set {
                this.deviceInfoField = value;
            }
        }
        
        /// <remarks/>
        public string PracticeCode {
            get {
                return this.practiceCodeField;
            }
            set {
                this.practiceCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PaymentPostingCategory {
            get {
                return this.paymentPostingCategoryField;
            }
            set {
                this.paymentPostingCategoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [ExcludeFromCodeCoverage]
    public partial class PhrloginAndAccountPractices {
        
        private string cellPhoneField;
        
        private string emailField;
        
        private string firstNameField;
        
        private string homeCellField;
        
        private string lastNameField;
        
        private string patientAccountField;
        
        private string pHRPasswordField;
        
        private string practiceCodeField;
        
        private string userIdField;
        
        private string sSNField;
        
        /// <remarks/>
        public string cellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string homeCell {
            get {
                return this.homeCellField;
            }
            set {
                this.homeCellField = value;
            }
        }
        
        /// <remarks/>
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string patientAccount {
            get {
                return this.patientAccountField;
            }
            set {
                this.patientAccountField = value;
            }
        }
        
        /// <remarks/>
        public string PHRPassword {
            get {
                return this.pHRPasswordField;
            }
            set {
                this.pHRPasswordField = value;
            }
        }
        
        /// <remarks/>
        public string practiceCode {
            get {
                return this.practiceCodeField;
            }
            set {
                this.practiceCodeField = value;
            }
        }
        
        /// <remarks/>
        public string userId {
            get {
                return this.userIdField;
            }
            set {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        public string SSN {
            get {
                return this.sSNField;
            }
            set {
                this.sSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    [ExcludeFromCodeCoverage]
    public partial class PHR_PIN_GENERATION {
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string user_PhoneField;
        
        private string emailField;
        
        private string email_SubjectField;
        
        private string email_BodyField;
        
        private string sMS_BodyField;
        
        private string practiceNameField;
        
        private string practice_CodeField;
        
        private string patient_AccountField;
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string User_Phone {
            get {
                return this.user_PhoneField;
            }
            set {
                this.user_PhoneField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Email_Subject {
            get {
                return this.email_SubjectField;
            }
            set {
                this.email_SubjectField = value;
            }
        }
        
        /// <remarks/>
        public string Email_Body {
            get {
                return this.email_BodyField;
            }
            set {
                this.email_BodyField = value;
            }
        }
        
        /// <remarks/>
        public string SMS_Body {
            get {
                return this.sMS_BodyField;
            }
            set {
                this.sMS_BodyField = value;
            }
        }
        
        /// <remarks/>
        public string PracticeName {
            get {
                return this.practiceNameField;
            }
            set {
                this.practiceNameField = value;
            }
        }
        
        /// <remarks/>
        public string Practice_Code {
            get {
                return this.practice_CodeField;
            }
            set {
                this.practice_CodeField = value;
            }
        }
        
        /// <remarks/>
        public string Patient_Account {
            get {
                return this.patient_AccountField;
            }
            set {
                this.patient_AccountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventHandler(object sender, WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WEB_PHR_SOFT_IPHR_PIN_GenerationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getMergedPatientAccount_SoftCompletedEventHandler(object sender, getMergedPatientAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getMergedPatientAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMergedPatientAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getPatientAccount_SoftCompletedEventHandler(object sender, getPatientAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getPatientAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPatientAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getDetailedPhrMergedAccounts1_SoftCompletedEventHandler(object sender, getDetailedPhrMergedAccounts1_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getDetailedPhrMergedAccounts1_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDetailedPhrMergedAccounts1_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getDetailedPhrMergedAccounts2_SoftCompletedEventHandler(object sender, getDetailedPhrMergedAccounts2_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getDetailedPhrMergedAccounts2_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDetailedPhrMergedAccounts2_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getPhrAdditionalAccount_SoftCompletedEventHandler(object sender, getPhrAdditionalAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getPhrAdditionalAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPhrAdditionalAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void getPhrChildVerification_SoftCompletedEventHandler(object sender, getPhrChildVerification_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class getPhrChildVerification_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPhrChildVerification_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventHandler(object sender, updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePhrMergedAccountsPhoneEmail1_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventHandler(object sender, updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePhrMergedAccountsPhoneEmail2_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updatePhrMergedAccountsPhoneDeleteCompletedEventHandler(object sender, updatePhrMergedAccountsPhoneDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updatePhrMergedAccountsPhoneDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePhrMergedAccountsPhoneDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void deletePhrMergedAccounts1_SoftCompletedEventHandler(object sender, deletePhrMergedAccounts1_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class deletePhrMergedAccounts1_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deletePhrMergedAccounts1_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void deletePhrMergedAccounts2_SoftCompletedEventHandler(object sender, deletePhrMergedAccounts2_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class deletePhrMergedAccounts2_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deletePhrMergedAccounts2_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void deletePhrMergedAccounts3_SoftCompletedEventHandler(object sender, deletePhrMergedAccounts3_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class deletePhrMergedAccounts3_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deletePhrMergedAccounts3_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void createPhrAccount_SoftCompletedEventHandler(object sender, createPhrAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class createPhrAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createPhrAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updatePhrAccount_SoftCompletedEventHandler(object sender, updatePhrAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updatePhrAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePhrAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void blockPhrAccount_SoftCompletedEventHandler(object sender, blockPhrAccount_SoftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class blockPhrAccount_SoftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal blockPhrAccount_SoftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updateProvidersNotesTemplatesCompletedEventHandler(object sender, updateProvidersNotesTemplatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updateProvidersNotesTemplatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateProvidersNotesTemplatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void updatePatientNotesTemplates_v1CompletedEventHandler(object sender, updatePatientNotesTemplates_v1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class updatePatientNotesTemplates_v1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePatientNotesTemplates_v1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void sendSMSCompletedEventHandler(object sender, sendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [ExcludeFromCodeCoverage]
    public partial class sendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591